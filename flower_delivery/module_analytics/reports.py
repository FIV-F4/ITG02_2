# module_analytics/reports.py

from module_orders.models import Order, OrderProduct
from django.db.models import Sum, Count, Avg, F, DecimalField
from django.db.models.functions import TruncDay
from datetime import datetime

def generate_detailed_report():
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á—ë—Ç –ø–æ –∑–∞–∫–∞–∑–∞–º –∏ –ø—Ä–æ–¥–∞–∂–∞–º.
    """
    total_orders = Order.objects.count()

    # –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â—É—é –≤—ã—Ä—É—á–∫—É, —Å—É–º–º–∏—Ä—É—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∫–∞–∂–¥–æ–≥–æ OrderProduct
    total_revenue = OrderProduct.objects.aggregate(
        total=Sum(F('quantity') * F('price'), output_field=DecimalField())
    )['total'] or 0

    # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–∏–π —á–µ–∫
    average_order_value = OrderProduct.objects.values('order').annotate(
        order_total=Sum(F('quantity') * F('price'))
    ).aggregate(avg=Avg('order_total'))['avg'] or 0

    # –ü—Ä–æ–¥–∞–∂–∏ –ø–æ –¥–Ω—è–º
    sales_by_day = OrderProduct.objects.annotate(
        day=TruncDay('order__date')
    ).values('day').annotate(
        total_sales=Sum(F('quantity') * F('price'), output_field=DecimalField()),
        orders=Count('order', distinct=True)
    ).order_by('day')

    report = f"üìä *–ü–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á—ë—Ç –ø–æ –∑–∞–∫–∞–∑–∞–º:*\n\n"
    report += f"‚Ä¢ –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: *{total_orders}*\n"
    report += f"‚Ä¢ –û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞: *{total_revenue:.2f} —Ä—É–±.*\n"
    report += f"‚Ä¢ –°—Ä–µ–¥–Ω–∏–π —á–µ–∫: *{average_order_value:.2f} —Ä—É–±.*\n\n"
    report += "*–ü—Ä–æ–¥–∞–∂–∏ –ø–æ –¥–Ω—è–º:*\n"

    for entry in sales_by_day:
        day = entry['day'].strftime('%d-%m-%Y')
        total_sales = entry['total_sales'] or 0
        orders_count = entry['orders']
        report += f"üìÖ {day} ‚Äî –ó–∞–∫–∞–∑–æ–≤: *{orders_count}*, –í—ã—Ä—É—á–∫–∞: *{total_sales:.2f} —Ä—É–±.*\n"

    return report
