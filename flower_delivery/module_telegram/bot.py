"""
–ü—É—Ç—å: module_telegram/bot.py
Telegram-–±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞–º–∏.
"""

import asyncio
import logging
from datetime import datetime
from decimal import Decimal
from aiogram import Bot, Router, Dispatcher, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command, CommandStart
from asgiref.sync import sync_to_async
from module_telegram.config import TOKEN
from module_telegram.database import (
    get_order_details, get_user_id_by_telegram_id, get_order_user,
    update_order_status, get_order_report, get_last_order_details
)
from module_telegram.keyboards import create_order_keyboard
from module_reg_auth_user.models import User
from module_analytics.reports import generate_detailed_report


logging.basicConfig(level=logging.INFO)

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞
bot = Bot(token=TOKEN)
router = Router()

def format_order_details(order_details):
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏.
    –†–∞–∑–±–∏–≤–∞–µ—Ç –¥–ª–∏–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ —á–∞—Å—Ç–∏, –µ—Å–ª–∏ –æ–Ω–∏ –ø—Ä–µ–≤—ã—à–∞—é—Ç –ª–∏–º–∏—Ç Telegram.
    """
    if not order_details:
        return ["–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤."]

    messages = []
    current_message = "üì¶ *–í–∞—à–∏ –∑–∞–∫–∞–∑—ã:*\n"
    for order in order_details:
        formatted_date = (
            order['date'].strftime('%d-%m-%Y %H:%M')
            if isinstance(order['date'], datetime)
            else str(order['date'])
        )
        order_message = (
            f"\n*–ó–∞–∫–∞–∑ ‚Ññ{order['order_id']}* - _{order['status']}_\n"
            f"üóì *–î–∞—Ç–∞:* {formatted_date}\n"
            "üõç *–¢–æ–≤–∞—Ä—ã:*\n"
        )
        for product in order['products']:
            price = (
                f"{product['price']:.2f}" if isinstance(product['price'], Decimal)
                else str(product['price'])
            )
            order_message += (
                f"  ‚Ä¢ {product['name']} (x{product['quantity']}): *{price} —Ä—É–±.*\n"
            )
        order_message += "---------------------\n"

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏ —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ª–∏–º–∏—Ç
        if len(current_message) + len(order_message) > 4000:
            messages.append(current_message)
            current_message = order_message
        else:
            current_message += order_message

    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–µ–µ—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ
    if current_message:
        messages.append(current_message)
    return messages


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /get_order


# –§—É–Ω–∫—Ü–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ —Å—Ç–∞—Ç—É—Å–µ –∑–∞–∫–∞–∑–∞
# –§—É–Ω–∫—Ü–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ —Å—Ç–∞—Ç—É—Å–µ –∑–∞–∫–∞–∑–∞
async def notify_order_status(order_id, status):
    """
    –£–≤–µ–¥–æ–º–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –æ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞.
    """
    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = await sync_to_async(get_order_user)(order_id)
    await bot.send_message(user_id, f"–°—Ç–∞—Ç—É—Å –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞ #{order_id} –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ '{status}'.")

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    admins = await sync_to_async(User.objects.filter(is_staff=True, telegram_id__isnull=False).all)()

    if admins:
        message = f"üÜï –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞ #{order_id} –Ω–∞ '{status}'."
        for admin in admins:
            await bot.send_message(admin.telegram_id, message)
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /update_order
@router.message(Command('update_order'))
async def update_order(message: Message):
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞.
    """
    order_id = int(message.get_args())
    new_status = "ordered"

    # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞
    await sync_to_async(update_order_status)(order_id, new_status)
    await notify_order_status(order_id, new_status)
    await message.answer(f"–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ #{order_id} –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ '{new_status}'.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /order_report
@router.callback_query(F.data == "order_report")
async def process_order_report(callback: CallbackQuery):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –æ—Ç—á—ë—Ç–∞ —á–µ—Ä–µ–∑ –∫–æ–ª–±—ç–∫.
    """
    user_telegram_id = callback.from_user.id
    user = await sync_to_async(User.objects.filter(telegram_id=user_telegram_id).first)()
    if not user or not user.is_staff:
        await callback.message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.")
        await callback.answer()
        return

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á—ë—Ç –∏–∑ –º–æ–¥—É–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
    report = await sync_to_async(generate_detailed_report)()

    if report:
        messages = split_long_message(report)
        for msg in messages:
            await callback.message.answer(msg)
    else:
        await callback.message.answer("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç—á—ë—Ç–∞.")

    await callback.answer()



# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@router.message(CommandStart())
async def start(message: Message):
    """
    –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    telegram_id = message.from_user.id
    full_name = message.from_user.full_name

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ç–∞–∫–∏–º telegram_id
    user = await sync_to_async(User.objects.filter(telegram_id=telegram_id).first)()

    if user:
        is_admin = user.is_staff
        await message.answer(
            f"–ü—Ä–∏–≤–µ—Ç, {full_name}! –Ø –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞–º–∏.",
            reply_markup=create_order_keyboard(is_admin)
        )
    else:
        await message.answer(
            f"–ü—Ä–∏–≤–µ—Ç, {full_name}! –í–∞—à Telegram ID: {telegram_id}. "
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —ç—Ç–æ—Ç ID –Ω–∞ –Ω–∞—à–µ–º —Å–∞–π—Ç–µ, —á—Ç–æ–±—ã —Å–≤—è–∑–∞—Ç—å –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç."
        )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–±—ç–∫–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–∫–∞–∑–∞


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–±—ç–∫–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤
@router.message(Command('get_order'))
async def get_order(message: Message):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –¥–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –µ–≥–æ telegram_id.
    """
    user_id = message.from_user.id  # –ü–æ–ª—É—á–µ–Ω–∏–µ telegram_id
    user_id = await sync_to_async(get_user_id_by_telegram_id)(user_id)

    if not user_id:
        await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    order_details = await sync_to_async(get_order_details)(user_id)
    messages = format_order_details(order_details)
    for msg in messages:
        await message.answer(msg, parse_mode='Markdown')

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–±—ç–∫–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤
@router.callback_query(F.data == "get_order")
async def process_get_order(callback: CallbackQuery):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤ —á–µ—Ä–µ–∑ –∫–æ–ª–±—ç–∫.
    """
    user_telegram_id = callback.from_user.id
    user_id = await sync_to_async(get_user_id_by_telegram_id)(user_telegram_id)

    if not user_id:
        await callback.message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await callback.answer()
        return

    order_details = await sync_to_async(get_order_details)(user_id)
    messages = format_order_details(order_details)
    for msg in messages:
        await callback.message.answer(msg, parse_mode='Markdown')
    await callback.answer()



# –û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç—á—ë—Ç–∞
@router.message(Command('order_report'))
async def order_report(message: Message):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á—ë—Ç –ø–æ –∑–∞–∫–∞–∑–∞–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤).
    """
    user_telegram_id = message.from_user.id
    user = await sync_to_async(User.objects.filter(telegram_id=user_telegram_id).first)()
    if not user or not user.is_staff:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.")
        return

    try:
        report = await sync_to_async(generate_detailed_report)()
    except Exception as e:
        logging.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á—ë—Ç–∞: %s", e)
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á—ë—Ç–∞.")
        return

    if report:
        messages = split_long_message(report)
        for msg in messages:
            await message.answer(msg, parse_mode='Markdown')
    else:
        await message.answer("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç—á—ë—Ç–∞.")


def split_long_message(text, max_length=4096):
    """
    –†–∞–∑–±–∏–≤–∞–µ—Ç –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏, –Ω–µ –ø—Ä–µ–≤—ã—à–∞—é—â–∏–µ max_length —Å–∏–º–≤–æ–ª–æ–≤.
    """
    messages = []
    while len(text) > max_length:
        split_index = text.rfind('\n', 0, max_length)
        if split_index == -1:
            split_index = max_length
        messages.append(text[:split_index])
        text = text[split_index:]
    messages.append(text)
    return messages



@router.message(Command('get_last_order'))
async def get_last_order(message: Message):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –¥–µ—Ç–∞–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–∫–∞–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    user_id = message.from_user.id  # Telegram ID
    user_id = await sync_to_async(get_user_id_by_telegram_id)(user_id)
    if not user_id:
        await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    last_order_details = await sync_to_async(get_last_order_details)(user_id)
    if not last_order_details:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤.")
        return
    messages = format_order_details([last_order_details])
    for msg in messages:
        await message.answer(msg, parse_mode='Markdown')

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–±—ç–∫–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–∫–∞–∑–∞
@router.callback_query(F.data == "get_last_order")
async def process_get_last_order(callback: CallbackQuery):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–∫–∞–∑–∞ —á–µ—Ä–µ–∑ –∫–æ–ª–±—ç–∫.
    """
    user_telegram_id = callback.from_user.id
    user_id = await sync_to_async(get_user_id_by_telegram_id)(user_telegram_id)

    if not user_id:
        await callback.message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await callback.answer()
        return

    last_order_details = await sync_to_async(get_last_order_details)(user_id)
    if not last_order_details:
        await callback.message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤.")
        await callback.answer()
        return

    messages = format_order_details([last_order_details])
    for msg in messages:
        await callback.message.answer(msg, parse_mode='Markdown')
    await callback.answer()


@router.message(Command('get_orders_by_status'))
async def get_orders_by_status(message: Message):
    """
    –î–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: –ü–æ–ª—É—á–∞–µ—Ç –∑–∞–∫–∞–∑—ã —Å –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–º–∏ —Å—Ç–∞—Ç—É—Å–∞–º–∏.
    """
    user_telegram_id = message.from_user.id
    user = await sync_to_async(User.objects.filter(telegram_id=user_telegram_id).first)()
    if not user or not user.is_staff:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.")
        return

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ç—É—Å—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ã
    statuses = ['ordered', '–û—Ñ–æ—Ä–º–ª–µ–Ω', 'shipped', '–û—Ç–ø—Ä–∞–≤–ª–µ–Ω']
    orders = await sync_to_async(get_orders_by_status)(statuses)
    if not orders:
        await message.answer("–ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º–∏ —Å—Ç–∞—Ç—É—Å–∞–º–∏.")
        return
    formatted_message = format_order_details(orders)
    await message.answer(formatted_message, parse_mode='Markdown')


# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
async def main():
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞ –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã.
    """
    dp = Dispatcher()
    dp.include_router(router)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
