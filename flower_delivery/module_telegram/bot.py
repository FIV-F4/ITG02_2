import asyncio
from aiogram import Bot, Router, Dispatcher, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command, CommandStart
from module_telegram.config import TOKEN
from asgiref.sync import sync_to_async
import logging
from datetime import datetime
from decimal import Decimal
from module_telegram.database import get_order_details, get_user_id_by_telegram_id

logging.basicConfig(level=logging.INFO)

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞
bot = Bot(token=TOKEN)
router = Router()
def format_order_details(order_details):
    if not order_details:
        return "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤."

    message = "üì¶ *–í–∞—à–∏ –∑–∞–∫–∞–∑—ã:*\n"
    for order in order_details:
        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã
        if isinstance(order['date'], datetime):
            formatted_date = order['date'].strftime('%d-%m-%Y %H:%M')
        else:
            formatted_date = str(order['date'])

        message += f"\n*–ó–∞–∫–∞–∑ ‚Ññ{order['order_id']}* - _{order['status']}_\n"
        message += f"üóì *–î–∞—Ç–∞:* {formatted_date}\n"
        message += "üõç *–¢–æ–≤–∞—Ä—ã:*\n"
        for product in order['products']:
            # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–Ω—ã
            if isinstance(product['price'], Decimal):
                price = f"{product['price']:.2f}"
            else:
                price = str(product['price'])
            message += f"  ‚Ä¢ {product['name']} (x{product['quantity']}): *{price} —Ä—É–±.*\n"
        message += "---------------------\n"
    return message





# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /get_order
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /get_order
@router.message(Command('get_order'))
async def get_order(message: Message):
    user_id = message.from_user.id  # –ü–æ–ª—É—á–µ–Ω–∏–µ telegram_id
    # –ü–æ–ª—É—á–∞–µ–º user_id –∏–∑ telegram_id
    user_id = await sync_to_async(get_user_id_by_telegram_id)(user_id)

    if not user_id:
        await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –∑–∞–∫–∞–∑–∞
    order_details = await sync_to_async(get_order_details)(user_id)

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∑–∞–∫–∞–∑ —Å –ø–æ–º–æ—â—å—é format_order_details
    formatted_message = format_order_details(order_details)

    await message.answer(formatted_message)


# –§—É–Ω–∫—Ü–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ —Å—Ç–∞—Ç—É—Å–µ –∑–∞–∫–∞–∑–∞
async def notify_order_status(order_id, status):
    from module_telegram.database import get_order_user

    # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è user_id –ø–æ order_id
    user_id = await sync_to_async(get_order_user)(order_id)

    await bot.send_message(user_id, f"–°—Ç–∞—Ç—É—Å –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞ #{order_id} –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ '{status}'.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /update_order
@router.message(Command('update_order'))
async def update_order(message: Message):
    from module_telegram.database import update_order_status
    order_id = int(message.get_args())
    new_status = "ordered"

    # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞
    await sync_to_async(update_order_status)(order_id, new_status)

    await notify_order_status(order_id, new_status)
    await message.answer(f"–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ #{order_id} –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ '{new_status}'.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /order_report
@router.message(Command('order_report'))
async def order_report(message: Message):
    from module_telegram.database import get_order_report

    # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç—á—ë—Ç–∞
    report = await sync_to_async(get_order_report)()

    if report:
        await message.answer(f"–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∑–∞–∫–∞–∑–æ–≤:\n{report}")
    else:
        await message.answer("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç—á—ë—Ç–∞.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@router.message(CommandStart())
async def start(message: Message):
    from module_telegram.keyboards import create_order_keyboard
    from module_reg_auth_user.models import User  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤–∞—à—É –º–æ–¥–µ–ª—å User
    from asgiref.sync import sync_to_async  # –î–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö

    telegram_id = message.from_user.id
    full_name = message.from_user.full_name

    # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –≤—ã–∑–æ–≤ Django ORM –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ª–∏—á–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ç–∞–∫–∏–º telegram_id
    user = await sync_to_async(User.objects.filter(telegram_id=telegram_id).first)()

    if user:
        # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –µ—Å—Ç—å telegram_id, –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é
        await message.answer(
            f"–ü—Ä–∏–≤–µ—Ç, {full_name}! –Ø –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞–º–∏.{user}",
            reply_markup=create_order_keyboard()
        )
    else:
        # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç telegram_id, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ—Å—å–±–æ–π –¥–æ–±–∞–≤–∏—Ç—å –µ–≥–æ –Ω–∞ —Å–∞–π—Ç–µ
        await message.answer(
            f"–ü—Ä–∏–≤–µ—Ç, {full_name}! –í–∞—à Telegram ID: {telegram_id}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —ç—Ç–æ—Ç ID –Ω–∞ –Ω–∞—à–µ–º —Å–∞–π—Ç–µ, —á—Ç–æ–±—ã —Å–≤—è–∑–∞—Ç—å –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç."
        )


# –û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
# –û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
@router.callback_query(F.data == "get_order")
async def process_get_order(callback: CallbackQuery):
    user_telegram_id = callback.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º user_id –Ω–∞ –æ—Å–Ω–æ–≤–µ telegram_id
    user_id = await sync_to_async(get_user_id_by_telegram_id)(user_telegram_id)

    if not user_id:
        await callback.message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await callback.answer()
        return

    # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –∑–∞–∫–∞–∑–∞
    order_details = await sync_to_async(get_order_details)(user_id)

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∑–∞–∫–∞–∑ —Å –ø–æ–º–æ—â—å—é format_order_details
    formatted_message = format_order_details(order_details)

    await callback.message.answer(formatted_message, parse_mode='Markdown')

    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç—á—ë—Ç–∞
@router.callback_query(F.data == "order_report")
async def process_order_report(callback: CallbackQuery):
    from module_telegram.database import get_order_report

    # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç—á—ë—Ç–∞
    report = await sync_to_async(get_order_report)()

    if report:
        await callback.message.answer(f"–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∑–∞–∫–∞–∑–æ–≤:\n{report}")
    else:
        await callback.message.answer("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç—á—ë—Ç–∞.")

    await callback.answer()




# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
async def main():
    dp = Dispatcher()
    dp.include_router(router)

    # –ó–∞–ø—É—Å–∫ polling –¥–ª—è –±–æ—Ç–∞
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
