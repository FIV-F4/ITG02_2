# module_orders/signals.py

import asyncio
from django.db.models.signals import post_save
from django.dispatch import receiver
from module_orders.models import Order
from module_reg_auth_user.models import User
from module_telegram.bot import TOKEN
from asgiref.sync import async_to_sync
from aiogram import exceptions
import logging
from aiogram import Bot

async def send_message(telegram_id, message):
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ telegram_id.
    """
    print('–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è...')
    bot_token = TOKEN
    try:
        async with Bot(token=bot_token) as bot:
            await bot.send_message(telegram_id, message)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å telegram_id {telegram_id}: {e}")

@receiver(post_save, sender=Order)
def notify_on_order_status_change(sender, instance, **kwargs):
    """
    –£–≤–µ–¥–æ–º–ª—è–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∏ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞.
    """
    if not instance.pk:  # –ï—Å–ª–∏ –∑–∞–∫–∞–∑ —Ç–æ–ª—å–∫–æ —á—Ç–æ —Å–æ–∑–¥–∞–Ω
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª—Å—è –ª–∏ —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –∏ –æ–Ω –Ω–µ —Ä–∞–≤–µ–Ω 'cart'
    if 'status' in instance.__dict__ and instance.status != 'cart':
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∑–∞–∫–∞–∑–µ –∏ –¥–æ—Å—Ç–∞–≤–∫–µ
        message = f"üÜï –ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ #{instance.id}: {instance.get_status_display()}\n"
        message += f"üì¶ –ü—Ä–æ–¥—É–∫—Ç—ã:\n"
        for order_product in instance.orderproduct_set.all():
            message += f" - {order_product.product.name} (x{order_product.quantity})\n"
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –±–µ–∑ –¥–æ–ª–µ–π —Å–µ–∫—É–Ω–¥—ã –∏ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞
        formatted_date = instance.date.strftime('%Y-%m-%d %H:%M:%S')
        message += f"üìÖ –î–∞—Ç–∞: {formatted_date}\n"

        if instance.delivery_set.exists():
            delivery = instance.delivery_set.first()  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –¥–ª—è –∑–∞–∫–∞–∑–∞ –µ—Å—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∞ –¥–æ—Å—Ç–∞–≤–∫–∞
            message += f"üöö –ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏: {delivery.address}\n"
            message += f"üìû –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: {delivery.info}\n"
        else:
            message += "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ—Å—Ç–∞–≤–∫–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.\n"

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º telegram_id
        admins = User.objects.filter(is_staff=True, telegram_id__isnull=False)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
        for admin in admins:
            try:
                async_to_sync(send_message)(admin.telegram_id, message)
                print(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É —Å telegram_id {admin.telegram_id}")
            except exceptions.TelegramBadRequest as e:
                logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É —Å telegram_id {admin.telegram_id}: {e}")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª—é
        buyer = instance.user
        if buyer.telegram_id:
            try:
                async_to_sync(send_message)(buyer.telegram_id, message)
                print(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª—é —Å telegram_id {buyer.telegram_id}")
            except exceptions.TelegramBadRequest as e:
                logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª—é —Å telegram_id {buyer.telegram_id}: {e}")
        else:
            print(f"–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {buyer.username} –Ω–µ —É–∫–∞–∑–∞–Ω telegram_id, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
